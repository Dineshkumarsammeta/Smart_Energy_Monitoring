name: RS485 Script CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyserial

      # Step 4: Create log folder
      - name: Create log folder
        run: mkdir -p rs485_logs

      # Step 5: Run Python script with mocked serial port
      - name: Run RS485 script (mocked)
        run: |
          python - <<EOF
import sys
import types
import serial
import time
import os
import csv

# Mock serial.Serial for CI
class MockSerial:
    def __init__(self, *args, **kwargs):
        self.is_open = True
    def flushInput(self): pass
    def readline(self):
        # Simulate no data received
        time.sleep(0.1)
        return b''
    def close(self): self.is_open = False

serial.Serial = MockSerial

# Copy your script here (or import it if in repo)
SERIAL_PORT = '/dev/ttyUSB0'
BAUDRATE = 9600
TIMEOUT = 1
LOG_DIRECTORY = 'rs485_logs'
FILE_NAME_PREFIX = 'rs485_data'

def setup_logging():
    os.makedirs(LOG_DIRECTORY, exist_ok=True)
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    return os.path.join(LOG_DIRECTORY, f"{FILE_NAME_PREFIX}_{timestamp}.csv")

def log_data(file_path, data):
    with open(file_path, 'a', newline='') as f:
        writer = csv.writer(f)
        writer.writerow([time.time(), data])

def main():
    log_file_path = setup_logging()
    ser = serial.Serial(SERIAL_PORT, baudrate=BAUDRATE, timeout=TIMEOUT)
    ser.flushInput()
    print(f"Mocked RS485 port connected. Logging to {log_file_path}")
    # Only run one loop in CI
    for _ in range(1):
        received_bytes = ser.readline()
        if received_bytes:
            decoded_data = received_bytes.decode('utf-8').strip()
            log_data(log_file_path, decoded_data)
    ser.close()
    print("Serial port closed.")

main()
EOF
